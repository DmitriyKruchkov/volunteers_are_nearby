stages:
  - linting
  - testing
  - documentation
  - deploy
  - notify

before_script:
  - python3 -m venv venv
  - source venv/bin/activate
  - pip install poetry
  - poetry install


linting:
  stage: linting
  script:
    - echo "starting time is $(date)" > log-CI
    - ruff check --fix
  after_script:
    - echo "$CI_JOB_NAME is $CI_JOB_STATUS" >> log-CI
  artifacts:
    paths:
      - flaskr/
      - log-CI


testing:
  stage: testing
  script:
    - pytest
  after_script:
    - echo "$CI_JOB_NAME $CI_JOB_STATUS" >> log-CI
  artifacts:
    paths:
      - log-CI


documentation:
  stage: documentation
  script:
    - cd docs
    - python3 create_all_docs.py
  after_script:
    - echo "$CI_JOB_NAME is $CI_JOB_STATUS" >> log-CI
  artifacts:
    paths:
      - $CI_PROJECT_DIR/docs/
      - log-CI
  rules:
    - allow_failure: true


deploy:
  stage: deploy
  script:
    - docker-compose down
    - docker-compose up -d
  after_script:
    - echo "$CI_JOB_NAME is $CI_JOB_STATUS" >> log-CI
  artifacts:
    paths:
      - log-CI
    #  only:
    # - master

notify:
  stage: notify
  script:
    - echo "end time is $(date)" >> log-CI
    - sh ci-notify.sh log-CI
  when: always
